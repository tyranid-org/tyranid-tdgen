/**
 *
 * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Generated by `tyranid-tdgen@0.2.0`: https://github.com/tyranid-org/tyranid-tdgen
 * date: Sat Jul 15 2017 17:45:12 GMT-0400 (EDT)
 */
  

declare module 'tyranid-isomorphic' {

  export namespace Tyr {

    export interface CollectionInstance<IdType = string, T extends Document<IdType> = Document<IdType>> {
      findAll(args: any): Promise<T[]>;
      findOne(args: any): Promise<T>;
      idToUid(id: IdType): string;
    }

    export interface Document<IdType = string> {
      $model: CollectionInstance<this>;
      $uid: string;
      $id: IdType;
    }


    
    /**
     * Base interface from which documents in collection
     * "tyrLog" <TyrLogCollection> are derived
     */
    export interface BaseTyrLog<IdType = string, Container extends {} = {}> {
      du?: number;
      e?: TyrLogEventId;
      e$?: Container & BaseTyrLogEvent<IdType, Container>;
      hn?: string;
      l?: TyrLogLevelId;
      l$?: Container & BaseTyrLogLevel<IdType, Container>;
      m?: string;
      on?: Date;
      r?: {
        ip?: string;
        m?: string;
        p?: string;
        q?: any;
        sc?: number;
        sid?: string;
        ua?: IdType;
        ua$?: Container & BaseTyrUserAgent<IdType, Container>;
      };
      st?: string;
      u?: IdType;
      u$?: Container & BaseUser<IdType, Container>;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrLogEvent" <TyrLogEventCollection> are derived
     */
    export interface BaseTyrLogEvent<IdType = string, Container extends {} = {}> {
      label?: string;
      notes?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrLogLevel" <TyrLogLevelCollection> are derived
     */
    export interface BaseTyrLogLevel<IdType = string, Container extends {} = {}> {
      code?: string;
      method?: string;
      name?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrSchema" <TyrSchemaCollection> are derived
     */
    export interface BaseTyrSchema<IdType = string, Container extends {} = {}> {
      collection?: string;
      def?: any;
      match?: any;
      src?: string;
      type?: TyrSchemaTypeId;
      type$?: Container & BaseTyrSchemaType<IdType, Container>;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrSchemaType" <TyrSchemaTypeCollection> are derived
     */
    export interface BaseTyrSchemaType<IdType = string, Container extends {} = {}> {
      name?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "tyrUserAgent" <TyrUserAgentCollection> are derived
     */
    export interface BaseTyrUserAgent<IdType = string, Container extends {} = {}> {
      ua?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "unit" <UnitCollection> are derived
     */
    export interface BaseUnit<IdType = string, Container extends {} = {}> {
      abbreviation?: string;
      baseAdditive?: number;
      baseMultiplier?: number;
      factor?: string;
      formula?: string;
      name?: string;
      note?: string;
      /*
       * a unique id like _id, used when integers cannot be used
       */
      sid?: string;
      system?: UnitSystemId;
      system$?: Container & BaseUnitSystem<IdType, Container>;
      type?: UnitTypeId;
      type$?: Container & BaseUnitType<IdType, Container>;
    }
    
    /**
     * Base interface from which documents in collection
     * "unitFactor" <UnitFactorCollection> are derived
     */
    export interface BaseUnitFactor<IdType = string, Container extends {} = {}> {
      factor?: number;
      prefix?: string;
      symbol?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "unitSystem" <UnitSystemCollection> are derived
     */
    export interface BaseUnitSystem<IdType = string, Container extends {} = {}> {
      name?: string;
      url?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "unitType" <UnitTypeCollection> are derived
     */
    export interface BaseUnitType<IdType = string, Container extends {} = {}> {
      abbreviation?: string;
      formula?: string;
      name?: string;
      normal?: string;
      note?: string;
    }
    
    /**
     * Base interface from which documents in collection
     * "user" <UserCollection> are derived
     */
    export interface BaseUser<IdType = string, Container extends {} = {}> {
      email?: string;
      name?: string;
      skills?: {
        name?: string;
        years?: number;
      }[];
      teamId?: IdType;
    }
    
    
    /**
     * Document returned by collection "tyrLog" <TyrLogCollection>
     */
    export interface TyrLog<IdType = string>
      extends Document<IdType>, BaseTyrLog<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "tyrLogEvent" <TyrLogEventCollection>
     */
    export interface TyrLogEvent<IdType = string>
      extends Document<IdType>, BaseTyrLogEvent<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "tyrLogLevel" <TyrLogLevelCollection>
     */
    export interface TyrLogLevel<IdType = string>
      extends Document<IdType>, BaseTyrLogLevel<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "tyrSchema" <TyrSchemaCollection>
     */
    export interface TyrSchema<IdType = string>
      extends Document<IdType>, BaseTyrSchema<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "tyrSchemaType" <TyrSchemaTypeCollection>
     */
    export interface TyrSchemaType<IdType = string>
      extends Document<IdType>, BaseTyrSchemaType<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "tyrUserAgent" <TyrUserAgentCollection>
     */
    export interface TyrUserAgent<IdType = string>
      extends Document<IdType>, BaseTyrUserAgent<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "unit" <UnitCollection>
     */
    export interface Unit<IdType = string>
      extends Document<IdType>, BaseUnit<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "unitFactor" <UnitFactorCollection>
     */
    export interface UnitFactor<IdType = string>
      extends Document<IdType>, BaseUnitFactor<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "unitSystem" <UnitSystemCollection>
     */
    export interface UnitSystem<IdType = string>
      extends Document<IdType>, BaseUnitSystem<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "unitType" <UnitTypeCollection>
     */
    export interface UnitType<IdType = string>
      extends Document<IdType>, BaseUnitType<IdType, Document<IdType>> { _id: IdType }
    
    /**
     * Document returned by collection "user" <UserCollection>
     */
    export interface User<IdType = string>
      extends Document<IdType>, BaseUser<IdType, Document<IdType>> { _id: IdType }
    
    
    /**
     * Type definition for "tyrLog" collection
     */
    export interface TyrLogCollection<IdType = string>
      extends CollectionInstance<IdType, TyrLog<IdType>> {}
    
    /**
     * Type definition for "tyrLogEvent" collection
     */
    export interface TyrLogEventCollection<IdType = string>
      extends CollectionInstance<IdType, TyrLogEvent<IdType>>,
              TyrLogEventCollectionEnumStatic {}
    
    /**
     * Type definition for "tyrLogLevel" collection
     */
    export interface TyrLogLevelCollection<IdType = string>
      extends CollectionInstance<IdType, TyrLogLevel<IdType>>,
              TyrLogLevelCollectionEnumStatic {}
    
    /**
     * Type definition for "tyrSchema" collection
     */
    export interface TyrSchemaCollection<IdType = string>
      extends CollectionInstance<IdType, TyrSchema<IdType>> {}
    
    /**
     * Type definition for "tyrSchemaType" collection
     */
    export interface TyrSchemaTypeCollection<IdType = string>
      extends CollectionInstance<IdType, TyrSchemaType<IdType>>,
              TyrSchemaTypeCollectionEnumStatic {}
    
    /**
     * Type definition for "tyrUserAgent" collection
     */
    export interface TyrUserAgentCollection<IdType = string>
      extends CollectionInstance<IdType, TyrUserAgent<IdType>> {}
    
    /**
     * Type definition for "unit" collection
     */
    export interface UnitCollection<IdType = string>
      extends CollectionInstance<IdType, Unit<IdType>>,
              UnitCollectionEnumStatic {}
    
    /**
     * Type definition for "unitFactor" collection
     */
    export interface UnitFactorCollection<IdType = string>
      extends CollectionInstance<IdType, UnitFactor<IdType>>,
              UnitFactorCollectionEnumStatic {}
    
    /**
     * Type definition for "unitSystem" collection
     */
    export interface UnitSystemCollection<IdType = string>
      extends CollectionInstance<IdType, UnitSystem<IdType>>,
              UnitSystemCollectionEnumStatic {}
    
    /**
     * Type definition for "unitType" collection
     */
    export interface UnitTypeCollection<IdType = string>
      extends CollectionInstance<IdType, UnitType<IdType>>,
              UnitTypeCollectionEnumStatic {}
    
    /**
     * Type definition for "user" collection
     */
    export interface UserCollection<IdType = string>
      extends CollectionInstance<IdType, User<IdType>> {}
    
    
  /**
   * Static properties for enum collection "TyrLogEventCollection"
   */
  export interface TyrLogEventCollectionEnumStatic {}
  
  /**
   * Static properties for enum collection "TyrLogLevelCollection"
   */
  export interface TyrLogLevelCollectionEnumStatic {
    
      ERROR: {
        _id: 5;
        name: 'error';
        code: 'E';
        method: 'error';
        constructor: any;
      };

      FATAL: {
        _id: 6;
        name: 'fatal';
        code: 'F';
        method: 'error';
        constructor: any;
      };

      INFO: {
        _id: 3;
        name: 'info';
        code: 'I';
        method: 'info';
        constructor: any;
      };

      LOG: {
        _id: 2;
        name: 'log';
        code: 'L';
        method: 'log';
        constructor: any;
      };

      TRACE: {
        _id: 1;
        name: 'trace';
        code: 'T';
        method: 'trace';
        constructor: any;
      };

      WARN: {
        _id: 4;
        name: 'warn';
        code: 'W';
        method: 'warn';
        constructor: any;
      };

  }
  
  /**
   * Static properties for enum collection "TyrSchemaTypeCollection"
   */
  export interface TyrSchemaTypeCollectionEnumStatic {
    
      FULL: {
        _id: 1;
        name: 'Full';
        constructor: any;
      };

      PARTIAL: {
        _id: 2;
        name: 'Partial';
        constructor: any;
      };

  }
  
  /**
   * Static properties for enum collection "UnitCollection"
   */
  export interface UnitCollectionEnumStatic {
    
      ACRE: {
        _id: 74;
        name: 'acre';
        abbreviation: 'acre';
        formula: 'chain*furlong';
        type: any;
        system: any;
        sid: 'acre';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      AMPERE: {
        _id: 4;
        name: 'ampere';
        abbreviation: 'A';
        formula: any;
        type: any;
        system: any;
        sid: 'A';
        baseMultiplier: 1;
        constructor: any;
      };

      AMPERE_PER_METER: {
        _id: 17;
        name: 'amperePerMeter';
        abbreviation: any;
        formula: 'A/m';
        type: any;
        system: any;
        sid: 'A_m';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      AMPERE_PER_SQUARE_METER: {
        _id: 16;
        name: 'amperePerSquareMeter';
        abbreviation: any;
        formula: 'A/m2';
        type: any;
        system: any;
        sid: 'A_m2';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      BECQUEREL: {
        _id: 39;
        name: 'becquerel';
        abbreviation: 'Bq';
        formula: 's-1';
        type: any;
        system: any;
        sid: 'Bq';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      BIT: {
        _id: 103;
        name: 'bit';
        abbreviation: 'bit';
        formula: any;
        type: any;
        system: any;
        sid: 'bit';
        baseMultiplier: 1;
        constructor: any;
      };

      BYTE: {
        _id: 106;
        name: 'byte';
        abbreviation: 'B';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 8;
        sid: 'B';
        constructor: any;
      };

      CANDELA: {
        _id: 7;
        name: 'candela';
        abbreviation: 'cd';
        formula: any;
        type: any;
        system: any;
        sid: 'cd';
        baseMultiplier: 1;
        constructor: any;
      };

      CANDELA_PER_SQUARE_METER: {
        _id: 19;
        name: 'candelaPerSquareMeter';
        abbreviation: any;
        formula: 'cd/m2';
        type: any;
        system: any;
        sid: 'cd_m2';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      CELSIUS: {
        _id: 75;
        name: 'celsius';
        abbreviation: 'degC';
        formula: any;
        type: any;
        system: any;
        baseAdditive: 273.15;
        sid: 'degC';
        baseMultiplier: 1;
        constructor: any;
      };

      CHAIN: {
        _id: 73;
        name: 'chain';
        abbreviation: 'chain';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 20.1168;
        sid: 'chain';
        constructor: any;
      };

      COULOMB: {
        _id: 29;
        name: 'coulomb';
        abbreviation: 'C';
        formula: 's1A1';
        type: any;
        system: any;
        sid: 'C';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      COULOMB_PER_CUBIC_METER: {
        _id: 55;
        name: 'coulombPerCubicMeter';
        abbreviation: any;
        formula: 'C/m3';
        type: any;
        system: any;
        sid: 'C_m3';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      COULOMB_PER_KILOGRAM: {
        _id: 61;
        name: 'coulombPerKilogram';
        abbreviation: any;
        formula: 'C/kg';
        type: any;
        system: any;
        sid: 'C_kg';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      COULOMB_PER_SQUARE_METER: {
        _id: 56;
        name: 'coulombPerSquareMeter';
        abbreviation: any;
        formula: 'C/m2';
        type: any;
        system: any;
        sid: 'C_m2';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      CRUMB: {
        _id: 104;
        name: 'crumb';
        abbreviation: 'crumb';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 2;
        sid: 'crumb';
        constructor: any;
      };

      CUBIC_METER: {
        _id: 10;
        name: 'cubicMeter';
        abbreviation: any;
        formula: 'm3';
        type: any;
        system: any;
        sid: 'm3';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      CUBIC_METER_PER_KILOGRAM: {
        _id: 15;
        name: 'cubicMeterPerKilogram';
        abbreviation: any;
        formula: 'm3/kg';
        type: any;
        system: any;
        sid: 'm3_kg';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      CUBIT: {
        _id: 68;
        name: 'cubit';
        abbreviation: 'cubit';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.4572;
        sid: 'cubit';
        constructor: any;
      };

      CUP: {
        _id: 97;
        name: 'cup';
        abbreviation: 'cp';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000236588;
        sid: 'cp';
        constructor: any;
      };

      DAY: {
        _id: 82;
        name: 'day';
        abbreviation: 'day';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 86400;
        sid: 'day';
        constructor: any;
      };

      DOLLAR: {
        _id: 8;
        name: 'dollar';
        abbreviation: 'USD';
        formula: any;
        type: any;
        system: any;
        sid: 'USD';
        baseMultiplier: 1;
        constructor: any;
      };

      DRAM: {
        _id: 87;
        name: 'dram';
        abbreviation: 'dr';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.00177185;
        sid: 'dr';
        constructor: any;
      };

      FAHRENHEIT: {
        _id: 76;
        name: 'fahrenheit';
        abbreviation: 'degF';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.555555556;
        baseAdditive: 255.372222222;
        sid: 'degF';
        constructor: any;
      };

      FARAD: {
        _id: 31;
        name: 'farad';
        abbreviation: 'F';
        formula: 'C/V';
        type: any;
        system: any;
        sid: 'F';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      FARAD_PER_METER: {
        _id: 57;
        name: 'faradPerMeter';
        abbreviation: any;
        formula: 'F/m';
        type: any;
        system: any;
        sid: 'F_m';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      FLUID_OUNCE: {
        _id: 96;
        name: 'fluidOunce';
        abbreviation: 'floz';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000029574;
        sid: 'floz';
        constructor: any;
      };

      FOOT: {
        _id: 67;
        name: 'foot';
        abbreviation: 'ft';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.3048;
        sid: 'ft';
        constructor: any;
      };

      FURLONG: {
        _id: 70;
        name: 'furlong';
        abbreviation: 'furlong';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 201.168;
        sid: 'furlong';
        constructor: any;
      };

      GALLON: {
        _id: 100;
        name: 'gallon';
        abbreviation: 'gal';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.003785412;
        sid: 'gal';
        constructor: any;
      };

      GRAIN: {
        _id: 86;
        name: 'grain';
        abbreviation: 'gr';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.06479891;
        sid: 'gr';
        constructor: any;
      };

      GRAM: {
        _id: 2;
        name: 'gram';
        abbreviation: 'g';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.001;
        sid: 'g';
        constructor: any;
      };

      GRAY: {
        _id: 40;
        name: 'gray';
        abbreviation: 'Gy';
        formula: 'J/kg';
        type: any;
        system: any;
        sid: 'Gy';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      GRAY_PER_SECOND: {
        _id: 62;
        name: 'grayPerSecond';
        abbreviation: any;
        formula: 'Gy/s';
        type: any;
        system: any;
        sid: 'Gy_s';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      HENRY: {
        _id: 36;
        name: 'henry';
        abbreviation: 'H';
        formula: 'Wb/A';
        type: any;
        system: any;
        sid: 'H';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      HENRY_PER_METER: {
        _id: 58;
        name: 'henryPerMeter';
        abbreviation: any;
        formula: 'H/m';
        type: any;
        system: any;
        sid: 'H_m';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      HERTZ: {
        _id: 23;
        name: 'hertz';
        abbreviation: 'Hz';
        formula: 's-1';
        type: any;
        system: any;
        sid: 'Hz';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      HOUR: {
        _id: 81;
        name: 'hour';
        abbreviation: 'h';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 3600;
        sid: 'h';
        constructor: any;
      };

      HUNDREDWEIGHT: {
        _id: 90;
        name: 'hundredweight';
        abbreviation: 'cwt';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 50.80234544;
        sid: 'cwt';
        constructor: any;
      };

      INCH: {
        _id: 66;
        name: 'inch';
        abbreviation: 'in';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.0254;
        sid: 'in';
        constructor: any;
      };

      JOULE: {
        _id: 27;
        name: 'joule';
        abbreviation: 'J';
        formula: 'N1m1';
        type: any;
        system: any;
        sid: 'J';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      JOULE_PER_CUBIC_METER: {
        _id: 53;
        name: 'joulePerCubicMeter';
        abbreviation: any;
        formula: 'J/m3';
        type: any;
        system: any;
        sid: 'J_m3';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      JOULE_PER_KELVIN: {
        _id: 49;
        name: 'joulePerKelvin';
        abbreviation: any;
        formula: 'J/K';
        type: any;
        system: any;
        sid: 'J_K';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      JOULE_PER_KILOGRAM: {
        _id: 51;
        name: 'joulePerKilogram';
        abbreviation: any;
        formula: 'J/kg';
        type: any;
        system: any;
        sid: 'J_kg';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      JOULE_PER_KILOGRAM_KELVIN: {
        _id: 50;
        name: 'joulePerKilogramKelvin';
        abbreviation: any;
        formula: 'J/kg1K1';
        type: any;
        system: any;
        sid: 'J_kg1K1';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      JOULE_PER_MOLE: {
        _id: 59;
        name: 'joulePerMole';
        abbreviation: any;
        formula: 'J/mol';
        type: any;
        system: any;
        sid: 'J_mol';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      JOULE_PER_MOLE_KELVIN: {
        _id: 60;
        name: 'joulePerMoleKelvin';
        abbreviation: any;
        formula: 'J/mol1K1';
        type: any;
        system: any;
        sid: 'J_mol1K1';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      KATAL: {
        _id: 42;
        name: 'katal';
        abbreviation: 'kat';
        formula: 'mol/s';
        type: any;
        system: any;
        sid: 'kat';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      KATAL_PER_CUBIC_METER: {
        _id: 65;
        name: 'katalPerCubicMeter';
        abbreviation: any;
        formula: 'kat/m3';
        type: any;
        system: any;
        sid: 'kat_m3';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      KELVIN: {
        _id: 5;
        name: 'kelvin';
        abbreviation: 'K';
        formula: any;
        type: any;
        system: any;
        sid: 'K';
        baseMultiplier: 1;
        constructor: any;
      };

      KILOGRAM_PER_CUBIC_METER: {
        _id: 14;
        name: 'kilogramPerCubicMeter';
        abbreviation: any;
        formula: 'kg/m3';
        type: any;
        system: any;
        sid: 'kg_m3';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      KNOT: {
        _id: 102;
        name: 'knot';
        abbreviation: 'knot';
        formula: 'nautmi/h';
        type: any;
        system: any;
        sid: 'knot';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      LEAGUE: {
        _id: 72;
        name: 'league';
        abbreviation: 'league';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 5556;
        sid: 'league';
        constructor: any;
      };

      LITER: {
        _id: 93;
        name: 'liter';
        abbreviation: 'L';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.001;
        sid: 'L';
        constructor: any;
      };

      LONG_TON: {
        _id: 92;
        name: 'longTon';
        abbreviation: 'longTon';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1016.04691;
        sid: 'longTon';
        constructor: any;
      };

      LUMEN: {
        _id: 37;
        name: 'lumen';
        abbreviation: 'lm';
        formula: 'cd1sr1';
        type: any;
        system: any;
        sid: 'lm';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      LUX: {
        _id: 38;
        name: 'lux';
        abbreviation: 'lx';
        formula: 'lm/m2';
        type: any;
        system: any;
        sid: 'lx';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      METER: {
        _id: 1;
        name: 'meter';
        abbreviation: 'm';
        formula: any;
        type: any;
        system: any;
        sid: 'm';
        baseMultiplier: 1;
        constructor: any;
      };

      METER_PER_SECOND: {
        _id: 11;
        name: 'meterPerSecond';
        abbreviation: any;
        formula: 'm/s';
        type: any;
        system: any;
        sid: 'm_s';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      METER_PER_SECOND_SQUARED: {
        _id: 12;
        name: 'meterPerSecondSquared';
        abbreviation: any;
        formula: 'm/s2';
        type: any;
        system: any;
        sid: 'm_s2';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      MILE: {
        _id: 71;
        name: 'mile';
        abbreviation: 'mi';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1609.344;
        sid: 'mi';
        constructor: any;
      };

      MINUTE: {
        _id: 80;
        name: 'minute';
        abbreviation: 'min';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 60;
        sid: 'min';
        constructor: any;
      };

      MOLE: {
        _id: 6;
        name: 'mole';
        abbreviation: 'mol';
        formula: any;
        type: any;
        system: any;
        sid: 'mol';
        baseMultiplier: 1;
        constructor: any;
      };

      MOLE_PER_CUBIC_METER: {
        _id: 18;
        name: 'molePerCubicMeter';
        abbreviation: any;
        formula: 'mol/m3';
        type: any;
        system: any;
        sid: 'mol_m3';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      MONTH: {
        _id: 84;
        name: 'month';
        abbreviation: 'mon';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 2419200;
        sid: 'mon';
        constructor: any;
      };

      NAUTICAL_MILE: {
        _id: 101;
        name: 'nauticalMile';
        abbreviation: 'nautmi';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1852;
        sid: 'nautmi';
        constructor: any;
      };

      NEWTON: {
        _id: 24;
        name: 'newton';
        abbreviation: 'N';
        formula: 'm1kg1/s2';
        type: any;
        system: any;
        sid: 'N';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      NEWTON_METER: {
        _id: 26;
        name: 'newtonMeter';
        abbreviation: any;
        formula: 'N1m1';
        type: any;
        system: any;
        sid: 'N1m1';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      NEWTON_PER_METER: {
        _id: 45;
        name: 'newtonPerMeter';
        abbreviation: any;
        formula: 'N/m';
        type: any;
        system: any;
        sid: 'N_m';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      NIBBLE: {
        _id: 105;
        name: 'nibble';
        abbreviation: 'nibble';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 4;
        sid: 'nibble';
        constructor: any;
      };

      OHM: {
        _id: 32;
        name: 'ohm';
        abbreviation: 'OHM';
        formula: 'V/A';
        type: any;
        system: any;
        sid: 'OHM';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      OUNCE: {
        _id: 88;
        name: 'ounce';
        abbreviation: 'oz';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.0283495;
        sid: 'oz';
        constructor: any;
      };

      PASCAL: {
        _id: 25;
        name: 'pascal';
        abbreviation: 'Pa';
        formula: 'N/m2';
        type: any;
        system: any;
        sid: 'Pa';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      PASCAL_SECOND: {
        _id: 43;
        name: 'pascalSecond';
        abbreviation: any;
        formula: 'Pa1s1';
        type: any;
        system: any;
        sid: 'Pa1s1';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      PINT: {
        _id: 98;
        name: 'pint';
        abbreviation: 'pt';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000473176;
        sid: 'pt';
        constructor: any;
      };

      PLANCK_AREA: {
        _id: 112;
        name: 'planckArea';
        abbreviation: any;
        formula: 'lP2';
        type: any;
        system: any;
        sid: 'lP2';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      PLANCK_CHARGE: {
        _id: 110;
        name: 'planckCharge';
        abbreviation: 'qP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1.875545956e-18;
        sid: 'qP';
        constructor: any;
      };

      PLANCK_LENGTH: {
        _id: 107;
        name: 'planckLength';
        abbreviation: 'lP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1.616199e-35;
        sid: 'lP';
        constructor: any;
      };

      PLANCK_MASS: {
        _id: 108;
        name: 'planckMass';
        abbreviation: 'mP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 2.17651e-8;
        sid: 'mP';
        constructor: any;
      };

      PLANCK_TEMPERATURE: {
        _id: 111;
        name: 'planckTemperature';
        abbreviation: 'TP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1.416833e+32;
        sid: 'TP';
        constructor: any;
      };

      PLANCK_TIME: {
        _id: 109;
        name: 'planckTime';
        abbreviation: 'tP';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 5.39106e-44;
        sid: 'tP';
        constructor: any;
      };

      PLANCK_VOLUME: {
        _id: 113;
        name: 'planckVolume';
        abbreviation: any;
        formula: 'lP3';
        type: any;
        system: any;
        sid: 'lP3';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      POUND: {
        _id: 89;
        name: 'pound';
        abbreviation: 'lb';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.45359237;
        sid: 'lb';
        constructor: any;
      };

      QUART: {
        _id: 99;
        name: 'quart';
        abbreviation: 'qt';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000946353;
        sid: 'qt';
        constructor: any;
      };

      RADIAN: {
        _id: 21;
        name: 'radian';
        abbreviation: 'rad';
        formula: 'm/m';
        type: any;
        system: any;
        sid: 'rad';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      RADIAN_PER_SECOND: {
        _id: 46;
        name: 'radianPerSecond';
        abbreviation: any;
        formula: 'rad/s';
        type: any;
        system: any;
        sid: 'rad_s';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      RADIAN_PER_SECOND_SQUARED: {
        _id: 47;
        name: 'radianPerSecondSquared';
        abbreviation: any;
        formula: 'rad/s2';
        type: any;
        system: any;
        sid: 'rad_s2';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      RECIPROCAL_METER: {
        _id: 13;
        name: 'reciprocalMeter';
        abbreviation: any;
        formula: 'm-1';
        type: any;
        system: any;
        sid: 'm-1';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      ROD: {
        _id: 77;
        name: 'rod';
        abbreviation: 'rod';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 5.0292;
        sid: 'rod';
        constructor: any;
      };

      SECOND: {
        _id: 3;
        name: 'second';
        abbreviation: 's';
        formula: any;
        type: any;
        system: any;
        sid: 's';
        baseMultiplier: 1;
        constructor: any;
      };

      SHORT_TON: {
        _id: 91;
        name: 'shortTon';
        abbreviation: 'shortTon';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 907.18474;
        sid: 'shortTon';
        constructor: any;
      };

      SIEMENS: {
        _id: 33;
        name: 'siemens';
        abbreviation: 'S';
        formula: 'A/V';
        type: any;
        system: any;
        sid: 'S';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      SIEVERT: {
        _id: 41;
        name: 'sievert';
        abbreviation: 'Sv';
        formula: 'J/kg';
        type: any;
        system: any;
        sid: 'Sv';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      SQUARE_METER: {
        _id: 9;
        name: 'squareMeter';
        abbreviation: any;
        formula: 'm2';
        type: any;
        system: any;
        sid: 'm2';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      STERADIAN: {
        _id: 22;
        name: 'steradian';
        abbreviation: 'sr';
        formula: 'm2/m2';
        type: any;
        system: any;
        sid: 'sr';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      TABLESPOON: {
        _id: 95;
        name: 'tablespoon';
        abbreviation: 'tbsp';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000014787;
        sid: 'tbsp';
        constructor: any;
      };

      TEASPOON: {
        _id: 94;
        name: 'teaspoon';
        abbreviation: 'tsp';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.000004929;
        sid: 'tsp';
        constructor: any;
      };

      TESLA: {
        _id: 35;
        name: 'tesla';
        abbreviation: 'T';
        formula: 'Wb/m2';
        type: any;
        system: any;
        sid: 'T';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      TON: {
        _id: 79;
        name: 'ton';
        abbreviation: 'ton';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 1000;
        sid: 'ton';
        constructor: any;
      };

      VOID: {
        _id: 78;
        name: 'void';
        abbreviation: 'void';
        formula: any;
        type: any;
        system: any;
        sid: 'void';
        baseMultiplier: 1;
        constructor: any;
      };

      VOLT: {
        _id: 30;
        name: 'volt';
        abbreviation: 'V';
        formula: 'W/A';
        type: any;
        system: any;
        sid: 'V';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      VOLT_PER_METER: {
        _id: 54;
        name: 'voltPerMeter';
        abbreviation: any;
        formula: 'V/m';
        type: any;
        system: any;
        sid: 'V_m';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      WATT: {
        _id: 28;
        name: 'watt';
        abbreviation: 'W';
        formula: 'J/s';
        type: any;
        system: any;
        sid: 'W';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      WATT_PER_METER_KELVIN: {
        _id: 52;
        name: 'wattPerMeterKelvin';
        abbreviation: any;
        formula: 'W/m1K1';
        type: any;
        system: any;
        sid: 'W_m1K1';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      WATT_PER_SQUARE_METER: {
        _id: 48;
        name: 'wattPerSquareMeter';
        abbreviation: any;
        formula: 'W/m2';
        type: any;
        system: any;
        sid: 'W_m2';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      WATT_PER_SQUARE_METER_STERADIAN: {
        _id: 64;
        name: 'wattPerSquareMeterSteradian';
        abbreviation: any;
        formula: 'W/m2sr1';
        type: any;
        system: any;
        sid: 'W_m2sr1';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      WATT_PER_STERADIAN: {
        _id: 63;
        name: 'wattPerSteradian';
        abbreviation: any;
        formula: 'W/sr';
        type: any;
        system: any;
        sid: 'W_sr';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      WEBER: {
        _id: 34;
        name: 'weber';
        abbreviation: 'Wb';
        formula: 'V*s';
        type: any;
        system: any;
        sid: 'Wb';
        baseMultiplier: 1;
        units: any;
        constructor: any;
      };

      WEEK: {
        _id: 83;
        name: 'week';
        abbreviation: 'week';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 604800;
        sid: 'week';
        constructor: any;
      };

      YARD: {
        _id: 69;
        name: 'yard';
        abbreviation: 'yd';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 0.9144;
        sid: 'yd';
        constructor: any;
      };

      YEAR: {
        _id: 85;
        name: 'year';
        abbreviation: 'Yr';
        formula: any;
        type: any;
        system: any;
        baseMultiplier: 31449600;
        sid: 'Yr';
        constructor: any;
      };

  }
  
  /**
   * Static properties for enum collection "UnitFactorCollection"
   */
  export interface UnitFactorCollectionEnumStatic {}
  
  /**
   * Static properties for enum collection "UnitSystemCollection"
   */
  export interface UnitSystemCollectionEnumStatic {
    
      ENGLISH: {
        _id: 2;
        name: 'english';
        url: 'https://en.wikipedia.org/wiki/English_units';
        constructor: any;
      };

      METRIC: {
        _id: 1;
        name: 'metric';
        url: 'https://en.wikipedia.org/wiki/International_System_of_Units';
        constructor: any;
      };

      PLANCK: {
        _id: 3;
        name: 'planck';
        url: 'https://en.wikipedia.org/wiki/Planck_units';
        constructor: any;
      };

  }
  
  /**
   * Static properties for enum collection "UnitTypeCollection"
   */
  export interface UnitTypeCollectionEnumStatic {
    
      ABSORBED_DOSE: {
        _id: 41;
        name: 'absorbedDose';
        formula: 'l2/s2';
        note: 'Absorbed dose, specific energy (imparted), kerma.';
        components: any;
        sid: 'l2s-2';
        constructor: any;
      };

      ABSORBED_DOSE_RATE: {
        _id: 62;
        name: 'absorbedDoseRate';
        formula: 'l2/s3';
        components: any;
        sid: 'l2s-3';
        constructor: any;
      };

      ACCELERATION: {
        _id: 14;
        name: 'acceleration';
        formula: 'l/s2';
        components: any;
        sid: 'l1s-2';
        constructor: any;
      };

      ACTIVITY: {
        _id: 40;
        name: 'activity';
        formula: 's-1';
        note: 'Activity (referred to a radionuclide).';
        components: any;
        sid: 's-1';
        constructor: any;
      };

      ANGULAR_ACCELERATION: {
        _id: 47;
        name: 'angularAcceleration';
        formula: 'l1/l1s2';
        components: any;
        sid: 'l1l-1s-2';
        constructor: any;
      };

      ANGULAR_VELOCITY: {
        _id: 46;
        name: 'angularVelocity';
        formula: 'l1/l1s1';
        components: any;
        sid: 'l1l-1s-1';
        constructor: any;
      };

      AREA: {
        _id: 11;
        name: 'area';
        formula: 'l2';
        components: any;
        sid: 'l2';
        constructor: any;
      };

      BIT: {
        _id: 10;
        name: 'bit';
        formula: any;
        abbreviation: 'bit';
        normal: 'bit';
        note: 'Binary digit.';
        sid: 'bit';
        constructor: any;
      };

      BIT_RATE: {
        _id: 66;
        name: 'bitRate';
        formula: 'bit/s';
        components: any;
        sid: 'bit1s-1';
        constructor: any;
      };

      CAPACITANCE: {
        _id: 32;
        name: 'capacitance';
        formula: 's4cur2/m1l2';
        components: any;
        sid: 'cur2s4m-1l-2';
        constructor: any;
      };

      CATALYTIC_ACTIVITY: {
        _id: 43;
        name: 'catalyticActivity';
        formula: 'sub/s';
        components: any;
        sid: 'sub1s-1';
        constructor: any;
      };

      CATALYTIC_CONCENTRATION: {
        _id: 65;
        name: 'catalyticConcentration';
        formula: 'sub1/l3s1';
        note: 'Catalytic (activity) concentration.';
        components: any;
        sid: 'sub1s-1l-3';
        constructor: any;
      };

      CONCENTRATION: {
        _id: 20;
        name: 'concentration';
        formula: 'sub/l3';
        components: any;
        sid: 'sub1l-3';
        constructor: any;
      };

      CURRENCY: {
        _id: 9;
        name: 'currency';
        formula: any;
        abbreviation: 'c';
        note: '';
        sid: 'c';
        constructor: any;
      };

      CURRENT: {
        _id: 5;
        name: 'current';
        formula: any;
        abbreviation: 'cur';
        normal: 'A';
        note: 'Electric current.';
        sid: 'cur';
        constructor: any;
      };

      CURRENT_DENSITY: {
        _id: 18;
        name: 'currentDensity';
        formula: 'cur/l2';
        components: any;
        sid: 'cur1l-2';
        constructor: any;
      };

      DENSITY: {
        _id: 16;
        name: 'density';
        formula: 'm/l3';
        components: any;
        sid: 'm1l-3';
        constructor: any;
      };

      DOSE_EQUIVALENT: {
        _id: 42;
        name: 'doseEquivalent';
        formula: 'l2/s2';
        note: 'Dose equivalent, ambient dose equivalent, directional dose equivalent, personal dose equivalent, organ dose equivalent.';
        components: any;
        sid: 'l2s-2';
        constructor: any;
      };

      DURATION: {
        _id: 4;
        name: 'duration';
        formula: any;
        abbreviation: 's';
        normal: 's';
        note: 'Time.';
        sid: 's';
        constructor: any;
      };

      DYNAMIC_VISCOSITY: {
        _id: 44;
        name: 'dynamicViscosity';
        formula: 'm1/l1s1';
        components: any;
        sid: 'm1l-1s-1';
        constructor: any;
      };

      ELECTRIC_CHARGE: {
        _id: 30;
        name: 'electricCharge';
        formula: 's1cur1';
        note: 'Electric charge, quantity of electricity.';
        components: any;
        sid: 'cur1s1';
        constructor: any;
      };

      ELECTRIC_CHARGE_DENSITY: {
        _id: 55;
        name: 'electricChargeDensity';
        formula: 's1cur1/l3';
        components: any;
        sid: 'cur1s1l-3';
        constructor: any;
      };

      ELECTRIC_CONDUCTANCE: {
        _id: 34;
        name: 'electricConductance';
        formula: 's3cur2/l2m1';
        components: any;
        sid: 'cur2s3m-1l-2';
        constructor: any;
      };

      ELECTRIC_FIELD_STRENGTH: {
        _id: 54;
        name: 'electricFieldStrength';
        formula: 'l1m1/s3cur1';
        components: any;
        sid: 'l1m1cur-1s-3';
        constructor: any;
      };

      ELECTRIC_FLUX_DENSITY: {
        _id: 56;
        name: 'electricFluxDensity';
        formula: 's1cur1/l2';
        components: any;
        sid: 'cur1s1l-2';
        constructor: any;
      };

      ELECTRIC_RESISTANCE: {
        _id: 33;
        name: 'electricResistance';
        formula: 'l2m1/s3cur2';
        components: any;
        sid: 'm1l2cur-2s-3';
        constructor: any;
      };

      ENERGY: {
        _id: 28;
        name: 'energy';
        formula: 'l2m1/s2';
        note: 'Energy, work, quantity of heat.';
        components: any;
        sid: 'm1l2s-2';
        constructor: any;
      };

      ENERGY_DENSITY: {
        _id: 53;
        name: 'energyDensity';
        formula: 'm1/l1s2';
        components: any;
        sid: 'm1l-1s-2';
        constructor: any;
      };

      ENTROPY: {
        _id: 49;
        name: 'entropy';
        formula: 'l2m1/s2t1';
        note: 'Heat capacity, entropy.';
        components: any;
        sid: 'm1l2t-1s-2';
        constructor: any;
      };

      EXPOSURE: {
        _id: 61;
        name: 'exposure';
        formula: 's1cur1/m1';
        components: any;
        sid: 'cur1s1m-1';
        constructor: any;
      };

      FORCE: {
        _id: 25;
        name: 'force';
        formula: 'l1m1/s2';
        components: any;
        sid: 'l1m1s-2';
        constructor: any;
      };

      FREQUENCY: {
        _id: 24;
        name: 'frequency';
        formula: 's-1';
        components: any;
        sid: 's-1';
        constructor: any;
      };

      ILLUMINANCE: {
        _id: 39;
        name: 'illuminance';
        formula: 'l2lum1/l4';
        components: any;
        sid: 'lum1l2l-4';
        constructor: any;
      };

      INDUCTANCE: {
        _id: 37;
        name: 'inductance';
        formula: 'l2m1/s2cur2';
        components: any;
        sid: 'm1l2cur-2s-2';
        constructor: any;
      };

      IRRADIANCE: {
        _id: 48;
        name: 'irradiance';
        formula: 'm1/s3';
        note: 'Heat flux density, irradiance.';
        components: any;
        sid: 'm1s-3';
        constructor: any;
      };

      LENGTH: {
        _id: 2;
        name: 'length';
        formula: any;
        abbreviation: 'l';
        normal: 'm';
        note: 'Length.';
        sid: 'l';
        constructor: any;
      };

      LUMINANCE: {
        _id: 21;
        name: 'luminance';
        formula: 'lum/l2';
        components: any;
        sid: 'lum1l-2';
        constructor: any;
      };

      LUMINOSITY: {
        _id: 8;
        name: 'luminosity';
        formula: any;
        abbreviation: 'lum';
        normal: 'cd';
        note: 'Luminous intensity.';
        sid: 'lum';
        constructor: any;
      };

      LUMINOUS_FLUX: {
        _id: 38;
        name: 'luminousFlux';
        formula: 'l2lum1/l2';
        components: any;
        sid: 'lum1l2l-2';
        constructor: any;
      };

      MAGNETIC_FIELD_STRENGTH: {
        _id: 19;
        name: 'magneticFieldStrength';
        formula: 'cur/l';
        components: any;
        sid: 'cur1l-1';
        constructor: any;
      };

      MAGNETIC_FLUX: {
        _id: 35;
        name: 'magneticFlux';
        formula: 'l2m1/s2cur1';
        components: any;
        sid: 'm1l2cur-1s-2';
        constructor: any;
      };

      MAGNETIC_FLUX_DENSITY: {
        _id: 36;
        name: 'magneticFluxDensity';
        formula: 'm/s2cur1';
        components: any;
        sid: 'm1cur-1s-2';
        constructor: any;
      };

      MASS: {
        _id: 3;
        name: 'mass';
        formula: any;
        abbreviation: 'm';
        normal: 'kg';
        note: 'Mass.';
        sid: 'm';
        constructor: any;
      };

      MOLAR_ENERGY: {
        _id: 59;
        name: 'molarEnergy';
        formula: 'l2m1/s2sub1';
        components: any;
        sid: 'm1l2sub-1s-2';
        constructor: any;
      };

      MOLAR_ENTROPY: {
        _id: 60;
        name: 'molarEntropy';
        formula: 'l2m1/s2t1sub1';
        note: 'Molar entropy, molar heat capacity.';
        components: any;
        sid: 'm1l2sub-1t-1s-2';
        constructor: any;
      };

      MOMENT_OF_FORCE: {
        _id: 27;
        name: 'momentOfForce';
        formula: 'l2m1/s2';
        components: any;
        sid: 'm1l2s-2';
        constructor: any;
      };

      NONE: {
        _id: 1;
        name: 'none';
        formula: any;
        abbreviation: 'none';
        normal: 'none';
        note: 'No units.';
        sid: 'none';
        constructor: any;
      };

      PERMEABILITY: {
        _id: 58;
        name: 'permeability';
        formula: 'l1m1/s2cur2';
        components: any;
        sid: 'l1m1cur-2s-2';
        constructor: any;
      };

      PERMITTIVITY: {
        _id: 57;
        name: 'permittivity';
        formula: 's4cur2/m1l3';
        components: any;
        sid: 'cur2s4m-1l-3';
        constructor: any;
      };

      PLANE_ANGLE: {
        _id: 22;
        name: 'planeAngle';
        formula: 'l/l';
        components: any;
        sid: 'l1l-1';
        constructor: any;
      };

      POWER: {
        _id: 29;
        name: 'power';
        formula: 'l2m1/s3';
        note: 'Power, radiant flux.';
        components: any;
        sid: 'm1l2s-3';
        constructor: any;
      };

      PRESSURE: {
        _id: 26;
        name: 'pressure';
        formula: 'm1/l1s2';
        note: 'Pressure, stress.';
        components: any;
        sid: 'm1l-1s-2';
        constructor: any;
      };

      RADIANCE: {
        _id: 64;
        name: 'radiance';
        formula: 'l2m1/l2s3';
        components: any;
        sid: 'm1l2l-2s-3';
        constructor: any;
      };

      RADIANT_INTENSITY: {
        _id: 63;
        name: 'radiantIntensity';
        formula: 'l4m1/l2s3';
        components: any;
        sid: 'm1l4l-2s-3';
        constructor: any;
      };

      SOLID_ANGLE: {
        _id: 23;
        name: 'solidAngle';
        formula: 'l2/l2';
        components: any;
        sid: 'l2l-2';
        constructor: any;
      };

      SPECIFIC_ENERGY: {
        _id: 51;
        name: 'specificEnergy';
        formula: 'l2/s2';
        components: any;
        sid: 'l2s-2';
        constructor: any;
      };

      SPECIFIC_ENTROPY: {
        _id: 50;
        name: 'specificEntropy';
        formula: 'l2/s2t1';
        note: 'Specific heat capacity, specific entropy.';
        components: any;
        sid: 'l2t-1s-2';
        constructor: any;
      };

      SPECIFIC_VOLUME: {
        _id: 17;
        name: 'specificVolume';
        formula: 'l3/m';
        components: any;
        sid: 'l3m-1';
        constructor: any;
      };

      SUBSTANCE: {
        _id: 7;
        name: 'substance';
        formula: any;
        abbreviation: 'sub';
        normal: 'mol';
        note: 'Amount of substance.';
        sid: 'sub';
        constructor: any;
      };

      SURFACE_TENSION: {
        _id: 45;
        name: 'surfaceTension';
        formula: 'm1/s2';
        components: any;
        sid: 'm1s-2';
        constructor: any;
      };

      TEMPERATURE: {
        _id: 6;
        name: 'temperature';
        formula: any;
        abbreviation: 't';
        normal: 'K';
        note: 'Thermodynamic temperature.';
        sid: 't';
        constructor: any;
      };

      THERMAL_CONDUCTIVITY: {
        _id: 52;
        name: 'thermalConductivity';
        formula: 'l1m1/s3t1';
        components: any;
        sid: 'l1m1t-1s-3';
        constructor: any;
      };

      VELOCITY: {
        _id: 13;
        name: 'velocity';
        formula: 'l/s';
        components: any;
        sid: 'l1s-1';
        constructor: any;
      };

      VOLTAGE: {
        _id: 31;
        name: 'voltage';
        formula: 'l2m1/s3cur1';
        note: 'Voltage, electric tension, electric potential difference, electromotive force.';
        components: any;
        sid: 'm1l2cur-1s-3';
        constructor: any;
      };

      VOLUME: {
        _id: 12;
        name: 'volume';
        formula: 'l3';
        components: any;
        sid: 'l3';
        constructor: any;
      };

      WAVE_NUMBER: {
        _id: 15;
        name: 'waveNumber';
        formula: 'l-1';
        components: any;
        sid: 'l-1';
        constructor: any;
      };

  }
  
    
    /**
     * Type alias for enum id values in "tyrLogEvent" collection
     */
    export type TyrLogEventId =
      'historical'
     |'http';
    
    /**
     * Type alias for enum id values in "tyrLogLevel" collection
     */
    export type TyrLogLevelId =
      1
     |2
     |3
     |4
     |5
     |6;
    
    /**
     * Type alias for enum id values in "tyrSchemaType" collection
     */
    export type TyrSchemaTypeId =
      1
     |2;
    
    /**
     * Type alias for enum id values in "unit" collection
     */
    export type UnitId =
      1
     |2
     |3
     |4
     |5
     |6
     |7
     |8
     |9
     |10
     |11
     |12
     |13
     |14
     |15
     |16
     |17
     |18
     |19
     |21
     |22
     |23
     |24
     |25
     |26
     |27
     |28
     |29
     |30
     |31
     |32
     |33
     |34
     |35
     |36
     |37
     |38
     |39
     |40
     |41
     |42
     |43
     |45
     |46
     |47
     |48
     |49
     |50
     |51
     |52
     |53
     |54
     |55
     |56
     |57
     |58
     |59
     |60
     |61
     |62
     |63
     |64
     |65
     |66
     |67
     |68
     |69
     |70
     |71
     |72
     |73
     |74
     |75
     |76
     |77
     |78
     |79
     |80
     |81
     |82
     |83
     |84
     |85
     |86
     |87
     |88
     |89
     |90
     |91
     |92
     |93
     |94
     |95
     |96
     |97
     |98
     |99
     |100
     |101
     |102
     |103
     |104
     |105
     |106
     |107
     |108
     |109
     |110
     |111
     |112
     |113;
    
    /**
     * Type alias for enum id values in "unitFactor" collection
     */
    export type UnitFactorId =
      1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1
     |1;
    
    /**
     * Type alias for enum id values in "unitSystem" collection
     */
    export type UnitSystemId =
      1
     |2
     |3;
    
    /**
     * Type alias for enum id values in "unitType" collection
     */
    export type UnitTypeId =
      1
     |2
     |3
     |4
     |5
     |6
     |7
     |8
     |9
     |10
     |11
     |12
     |13
     |14
     |15
     |16
     |17
     |18
     |19
     |20
     |21
     |22
     |23
     |24
     |25
     |26
     |27
     |28
     |29
     |30
     |31
     |32
     |33
     |34
     |35
     |36
     |37
     |38
     |39
     |40
     |41
     |42
     |43
     |44
     |45
     |46
     |47
     |48
     |49
     |50
     |51
     |52
     |53
     |54
     |55
     |56
     |57
     |58
     |59
     |60
     |61
     |62
     |63
     |64
     |65
     |66;
    
    /**
     * Add lookup properties to Tyr.byName with extended interfaces
     */
    export interface CollectionsByName<IdType = string> {
      tyrLog: TyrLogCollection<IdType>;
      tyrLogEvent: TyrLogEventCollection<IdType>;
      tyrLogLevel: TyrLogLevelCollection<IdType>;
      tyrSchema: TyrSchemaCollection<IdType>;
      tyrSchemaType: TyrSchemaTypeCollection<IdType>;
      tyrUserAgent: TyrUserAgentCollection<IdType>;
      unit: UnitCollection<IdType>;
      unitFactor: UnitFactorCollection<IdType>;
      unitSystem: UnitSystemCollection<IdType>;
      unitType: UnitTypeCollection<IdType>;
      user: UserCollection<IdType>;
    }

    /**
     * Add lookup properties to Tyr.byId with extended interfaces
     */
    export interface CollectionsById<IdType = string> {
      _l0: TyrLogCollection<IdType>;
      _l2: TyrLogEventCollection<IdType>;
      _l1: TyrLogLevelCollection<IdType>;
      _t1: TyrSchemaCollection<IdType>;
      _t0: TyrSchemaTypeCollection<IdType>;
      _u4: TyrUserAgentCollection<IdType>;
      _u2: UnitCollection<IdType>;
      _u3: UnitFactorCollection<IdType>;
      _u0: UnitSystemCollection<IdType>;
      _u1: UnitTypeCollection<IdType>;
      u00: UserCollection<IdType>;
    }
  

    /**
     * Union type of all current collection names
     */
    export type CollectionName =
      'tyrLog'
     |'tyrLogEvent'
     |'tyrLogLevel'
     |'tyrSchema'
     |'tyrSchemaType'
     |'tyrUserAgent'
     |'unit'
     |'unitFactor'
     |'unitSystem'
     |'unitType'
     |'user';

    /**
     * Union type of all current collection ids
     */
    export type CollectionId =
      '_l0'
     |'_l1'
     |'_l2'
     |'_t0'
     |'_t1'
     |'_u0'
     |'_u1'
     |'_u2'
     |'_u3'
     |'_u4'
     |'u00';
    
  }

}
