import { Tyr } from 'tyranid';
import * as fs from 'fs';
import * as path from 'path';

const { version } = JSON.parse(
  fs.readFileSync(
    path.join(__dirname, "../../package.json"),
    "utf-8"
  )
);


interface InterfaceDeclaration {
  name: string,
  properties: {
    name: string,
    // primative or subdocument
    type: string | InterfaceDeclaration
  }
}


function formatName(name: string) {
  return name.charAt(0).toUpperCase() + name.slice(1);
}


function pad(str: string, indent: number) {
  let i = indent;
  while (i--) str = "  " + str;
  return str;
}


function addField(def: any, indent = 0): string {
  if ('def' in def) def = def.def;
  if ('link' in def) return 'ObjectID';

  switch (def.is) {

    case 'string':
    case 'url':
    case 'email':
    case 'image':
    case 'password':
    case 'uid':
      return 'string';

    case 'boolean':
      return 'boolean';

    case 'double':
    case 'integer':
      return 'number';

    case 'date':
      return 'Date';

    case 'mongoid':
      return 'ObjectID';

    case 'array':
      return `${def.of ? addField(def.of, indent) : 'any'}[]`;

    case 'object': {
      const subFields = def.fields;
      if (!subFields) return 'any';
      let obj = ""
      obj += "{";
      for (const sub in subFields) {
        obj += "\n"
        obj += pad(`${sub}: ${addField(subFields[sub], indent + 1)}`, indent);
      }
      obj += "\n";
      obj += pad("}", indent - 1);
      return obj;
    }

    default:
      return 'any';

  }
}


export function generateDocumentInterface(col: Tyr.CollectionInstance, colInterfaceName: string) {
  const { name, fields } = col.def;
  const interfaceName = `${formatName(name)}Document`;

  let properties: string[] = [];

  for (const field in fields) {
    properties.push(
      `${field}: ${addField(fields[field]['def'], 4)};`
    );
  }

  return {
    name: interfaceName,
    declaration: `
    /**
     * Document returned by collection "${name}" <${colInterfaceName}>
     */
    interface ${interfaceName} extends Document {
      ${properties.join("\n      ")}
    }
    `
  };
}


export function generate(collections: Tyr.CollectionInstance[]) {

  const interfacePropMap: {
    [key: string]: {
      name: string,
      id: string,
      doc: {
        name: string,
        declaration: string
      }
    }
  } = {};

  /**
   * For each collection, we need to add...
   *   1. A new interface extending CollectionInstance
   *   2. A new interface extending Document, returned by (1)
   *   3. An extension of byName and byId which include the new CollectionInstances
   */
  for (const col of collections) {
    const {
      name,
      id
    } = col.def;

    const colInterfaceName = `${formatName(name)}CollectionInstance`;

    interfacePropMap[colInterfaceName] = {
      name,
      id,
      doc: generateDocumentInterface(col, colInterfaceName)
    };
  }

  const collectionInterfaces: string[] = [];
  const byNameEntries: string[] = [];
  const byIdEntries: string[] = [];
  const documentInterfaces: string[] = [];
  for (const interfaceName in interfacePropMap) {
    const { name, id, doc } = interfacePropMap[interfaceName];

    byNameEntries.push(`${name}: ${interfaceName};`)
    byIdEntries.push(`${id}: ${interfaceName};`);
    documentInterfaces.push(doc.declaration);

    collectionInterfaces.push(`
    /**
     * Type definition for "${name}" collection
     */
    interface ${interfaceName} extends CollectionInstance {
      new (...args: any[]): ${doc.name};
      fromClient(...args: any): ${doc.name};
      findAll(...args: any[]): Promise<${doc.name}[]>;
      findOne(...args: any[]): Promise<${doc.name}>;
      findAndModify(...args: any[]): Promise<${doc.name}>;
    }
    `);
  }

  return `/**
 * Generated by \`tyranid-tdgen@${version}\`: https://github.com/tyranid-org/tyranid-tdgen
 * date: ${new Date()}
 */
import { ObjectID } from 'mongodb';

declare module 'tyranid' {

  namespace Tyr {

    /**
     * Add lookup properties to Tyr.byName with extended interfaces
     */
    interface TyranidCollectionsByName {
      ${byNameEntries.join("\n      ")}
    }

    /**
     * Add lookup properties to Tyr.byId with extended interfaces
     */
    interface TyranidCollectionsById {
      ${byIdEntries.join("\n      ")}
    }

    ${collectionInterfaces.join("\n")}

    ${documentInterfaces.join("\n")}

  }

}
`;
}