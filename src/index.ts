import { Tyr } from 'tyranid';
import * as _ from 'lodash';
import * as fs from 'fs';
import * as path from 'path';


const { version } = JSON.parse(
  fs.readFileSync(
    path.join(__dirname, "../../package.json"),
    "utf-8"
  )
);


interface InterfaceDeclaration {
  name: string,
  properties: {
    name: string,
    // primative or subdocument
    type: string | InterfaceDeclaration
  }
}


export function generate(collections: Tyr.CollectionInstance[]) {

  const interfaces = {
    collectionInstances: <string[]> [],
    documents: <string[]> []
  };

  /**
   * For each collection, we need to add...
   *   1. A new interface extending CollectionInstance
   *   2. A new interface extending Document, returned by (1)
   *   3. An extension of byName and byId which include the new CollectionInstances
   */
  for (const col of collections) {
    const def = col.def;

    const pascalName = _.upperFirst(_.camelCase(def.name));
    const colInterfaceName = `Tyranid${pascalName}CollectionInstance`
    const docInterfaceName = `Tyranid${pascalName}Document`;

  }

  return `
/**
 * Generated by \`tyranid-tdgen@${version}\`: https://github.com/tyranid-org/tyranid-tdgen
 * date: ${new Date()}
 */
declare module 'tyranid' {
  namespace Tyr {

  }
}
  `;
}