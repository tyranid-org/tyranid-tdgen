import { Tyr } from 'tyranid';
import * as _ from 'lodash';
import * as fs from 'fs';
import * as path from 'path';


const { version } = JSON.parse(
  fs.readFileSync(
    path.join(__dirname, "../../package.json"),
    "utf-8"
  )
);


interface InterfaceDeclaration {
  name: string,
  properties: {
    name: string,
    // primative or subdocument
    type: string | InterfaceDeclaration
  }
}


export function generate(collections: Tyr.CollectionInstance[]) {

  const interfacePropMap: {
    [key: string]: {
      name: string,
      id: string,
      doc: string
    }
  } = {};

  /**
   * For each collection, we need to add...
   *   1. A new interface extending CollectionInstance
   *   2. A new interface extending Document, returned by (1)
   *   3. An extension of byName and byId which include the new CollectionInstances
   */
  for (const col of collections) {
    const {
      name,
      id
    } = col.def;

    const pascalName = _.upperFirst(_.camelCase(name));

    const colInterfaceName = `Tyranid${pascalName}CollectionInstance`;
    const docInterfaceName = `Tyranid${pascalName}Document`;

    interfacePropMap[colInterfaceName] = {
      name,
      id,
      doc: docInterfaceName
    };

  }

  const collectionInterfaces: string[] = [];
  const byNameEntries: string[] = [];
  const byIdEntries: string[] = [];
  for (const interfaceName in interfacePropMap) {
    const { name, id, doc } = interfacePropMap[interfaceName];
    byNameEntries.push(`${name}: ${interfaceName};`)
    byIdEntries.push(`${id}: ${interfaceName};`);
    collectionInterfaces.push(`
    /**
     * Type definition for "${name}" collection
     */
    interface ${interfaceName} extends CollectionInstance {
      new (...args: any[]): ${doc};
      fromClient(...args: any): ${doc};
      findAll(...args: any[]): Promise<${doc}[]>;
      findOne(...args: any[]): Promise<${doc}>;
      findAndModify(...args: any[]): Promise<${doc}>;
    }
    `);
  }

  return `
/**
 * Generated by \`tyranid-tdgen@${version}\`: https://github.com/tyranid-org/tyranid-tdgen
 * date: ${new Date()}
 */
declare module 'tyranid' {

  namespace Tyr {

    /**
     * Add lookup properties to Tyr.byName with extended interfaces
     */
    interface TyranidCollectionsByName {
      ${byNameEntries.join("\n      ")}
    }

    /**
     * Add lookup properties to Tyr.byId with extended interfaces
     */
    interface TyranidCollectionsById {
      ${byIdEntries.join("\n      ")}
    }

    ${collectionInterfaces.join("\n")}

  }

}
  `;
}